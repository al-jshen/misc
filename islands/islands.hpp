
// Code generated by stanc v2.27.0
#include <stan/model/model_header.hpp>
namespace islands_model_namespace {

using stan::io::dump;
using stan::model::assign;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 33> locations_array__ = 
{" (found before start of program)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 14, column 4 to column 35)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 16, column 4 to column 26)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 17, column 4 to column 25)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 18, column 4 to column 26)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 19, column 4 to column 25)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 20, column 4 to column 25)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 24, column 4 to column 85)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 25, column 4 to column 72)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 29, column 4 to column 36)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 31, column 4 to column 31)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 33, column 4 to column 29)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 34, column 4 to column 28)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 35, column 4 to column 29)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 37, column 4 to column 28)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 38, column 4 to column 30)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 2, column 4 to column 19)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 3, column 11 to column 12)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 3, column 4 to column 25)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 4, column 14 to column 15)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 4, column 4 to column 17)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 5, column 11 to column 12)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 5, column 14 to column 15)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 5, column 4 to column 27)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 9, column 11 to column 12)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 9, column 14 to column 15)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 9, column 4 to column 59)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 10, column 11 to column 12)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 10, column 4 to column 40)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 14, column 30 to column 31)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 24, column 11 to column 12)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 25, column 11 to column 12)",
 " (in '/home/js/programs/misc/islands/islands.stan', line 25, column 14 to column 15)"};



class islands_model final : public model_base_crtp<islands_model> {

 private:
  int n;
  Eigen::Matrix<double, -1, 1> population__;
  std::vector<int> tools;
  Eigen::Matrix<double, -1, -1> distances__;
  Eigen::Matrix<double, -1, -1> jitter__;
  Eigen::Matrix<double, -1, 1> zeros__; 
  Eigen::Map<Eigen::Matrix<double, -1, 1>> population{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> distances{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, -1>> jitter{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> zeros{nullptr, 0};
 
 public:
  ~islands_model() { }
  
  inline std::string model_name() const final { return "islands_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.27.0", "stancflags = "};
  }
  
  
  islands_model(stan::io::var_context& context__,
                unsigned int random_seed__ = 0,
                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "islands_model_namespace::islands_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 16;
      context__.validate_dims("data initialization","n","int",
           std::vector<size_t>{});
      n = std::numeric_limits<int>::min();
      
      current_statement__ = 16;
      n = context__.vals_i("n")[(1 - 1)];
      current_statement__ = 16;
      check_greater_or_equal(function__, "n", n, 1);
      current_statement__ = 17;
      validate_non_negative_index("population", "n", n);
      current_statement__ = 18;
      context__.validate_dims("data initialization","population","double",
           std::vector<size_t>{static_cast<size_t>(n)});
      population__ = Eigen::Matrix<double, -1, 1>(n);
      new (&population) Eigen::Map<Eigen::Matrix<double, -1, 1>>(population__.data(), n);
      
      
      {
        std::vector<local_scalar_t__> population_flat__;
        current_statement__ = 18;
        population_flat__ = context__.vals_r("population");
        current_statement__ = 18;
        pos__ = 1;
        current_statement__ = 18;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 18;
          assign(population, population_flat__[(pos__ - 1)],
            "assigning variable population", index_uni(sym1__));
          current_statement__ = 18;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 19;
      validate_non_negative_index("tools", "n", n);
      current_statement__ = 20;
      context__.validate_dims("data initialization","tools","int",
           std::vector<size_t>{static_cast<size_t>(n)});
      tools = std::vector<int>(n, std::numeric_limits<int>::min());
      
      current_statement__ = 20;
      tools = context__.vals_i("tools");
      current_statement__ = 21;
      validate_non_negative_index("distances", "n", n);
      current_statement__ = 22;
      validate_non_negative_index("distances", "n", n);
      current_statement__ = 23;
      context__.validate_dims("data initialization","distances","double",
           std::vector<size_t>{static_cast<size_t>(n),
            static_cast<size_t>(n)});
      distances__ = Eigen::Matrix<double, -1, -1>(n, n);
      new (&distances) Eigen::Map<Eigen::Matrix<double, -1, -1>>(distances__.data(), n, n);
      
      
      {
        std::vector<local_scalar_t__> distances_flat__;
        current_statement__ = 23;
        distances_flat__ = context__.vals_r("distances");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 23;
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            current_statement__ = 23;
            assign(distances, distances_flat__[(pos__ - 1)],
              "assigning variable distances", index_uni(sym2__),
                                                index_uni(sym1__));
            current_statement__ = 23;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 24;
      validate_non_negative_index("jitter", "n", n);
      current_statement__ = 25;
      validate_non_negative_index("jitter", "n", n);
      current_statement__ = 26;
      jitter__ = Eigen::Matrix<double, -1, -1>(n, n);
      new (&jitter) Eigen::Map<Eigen::Matrix<double, -1, -1>>(jitter__.data(), n, n);
      stan::math::fill(jitter, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 26;
      assign(jitter, diag_matrix(rep_vector(0.01, n)),
        "assigning variable jitter");
      current_statement__ = 27;
      validate_non_negative_index("zeros", "n", n);
      current_statement__ = 28;
      zeros__ = Eigen::Matrix<double, -1, 1>(n);
      new (&zeros) Eigen::Map<Eigen::Matrix<double, -1, 1>>(zeros__.data(), n);
      stan::math::fill(zeros, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 28;
      assign(zeros, rep_vector(0., n), "assigning variable zeros");
      current_statement__ = 29;
      validate_non_negative_index("k", "n", n);
      current_statement__ = 30;
      validate_non_negative_index("expected_tools", "n", n);
      current_statement__ = 31;
      validate_non_negative_index("K", "n", n);
      current_statement__ = 32;
      validate_non_negative_index("K", "n", n);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = n + 1 + 1 + 1 + 1 + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "islands_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> k;
      k = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(k, DUMMY_VAR__);
      
      current_statement__ = 1;
      k = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
            -1, 1, lp__, n);
      local_scalar_t__ p_alpha;
      p_alpha = DUMMY_VAR__;
      
      current_statement__ = 2;
      p_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      local_scalar_t__ p_beta;
      p_beta = DUMMY_VAR__;
      
      current_statement__ = 3;
      p_beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ p_gamma;
      p_gamma = DUMMY_VAR__;
      
      current_statement__ = 4;
      p_gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      local_scalar_t__ eta_sq;
      eta_sq = DUMMY_VAR__;
      
      current_statement__ = 5;
      eta_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      local_scalar_t__ rho_sq;
      rho_sq = DUMMY_VAR__;
      
      current_statement__ = 6;
      rho_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      Eigen::Matrix<local_scalar_t__, -1, 1> expected_tools;
      expected_tools = Eigen::Matrix<local_scalar_t__, -1, 1>(n);
      stan::math::fill(expected_tools, DUMMY_VAR__);
      
      current_statement__ = 7;
      assign(expected_tools,
        divide(
          elt_multiply(multiply(stan::math::exp(k), p_alpha),
            pow(population, p_beta)), p_gamma),
        "assigning variable expected_tools");
      Eigen::Matrix<local_scalar_t__, -1, -1> K;
      K = Eigen::Matrix<local_scalar_t__, -1, -1>(n, n);
      stan::math::fill(K, DUMMY_VAR__);
      
      current_statement__ = 8;
      assign(K,
        add(
          multiply(eta_sq,
            stan::math::exp(multiply(-rho_sq, square(distances)))), jitter),
        "assigning variable K");
      {
        current_statement__ = 9;
        lp_accum__.add(poisson_lpmf<propto__>(tools, expected_tools));
        current_statement__ = 10;
        lp_accum__.add(multi_normal_lpdf<propto__>(k, zeros, K));
        current_statement__ = 11;
        lp_accum__.add(exponential_lpdf<propto__>(p_alpha, 1));
        current_statement__ = 12;
        lp_accum__.add(exponential_lpdf<propto__>(p_beta, 1));
        current_statement__ = 13;
        lp_accum__.add(exponential_lpdf<propto__>(p_gamma, 1));
        current_statement__ = 14;
        lp_accum__.add(exponential_lpdf<propto__>(eta_sq, 2));
        current_statement__ = 15;
        lp_accum__.add(exponential_lpdf<propto__>(rho_sq, 0.5));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "islands_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> k;
      k = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(k, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      k = in__.template read_constrain_lub<Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(
            -1, 1, lp__, n);
      double p_alpha;
      p_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_alpha = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      double p_beta;
      p_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      p_beta = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double p_gamma;
      p_gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      p_gamma = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                  0, lp__);
      double eta_sq;
      eta_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      eta_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      double rho_sq;
      rho_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      rho_sq = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                 0, lp__);
      Eigen::Matrix<double, -1, 1> expected_tools;
      expected_tools = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(expected_tools, std::numeric_limits<double>::quiet_NaN());
      
      
      Eigen::Matrix<double, -1, -1> K;
      K = Eigen::Matrix<double, -1, -1>(n, n);
      stan::math::fill(K, std::numeric_limits<double>::quiet_NaN());
      
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(k[(sym1__ - 1)]);
      }
      vars__.emplace_back(p_alpha);
      vars__.emplace_back(p_beta);
      vars__.emplace_back(p_gamma);
      vars__.emplace_back(eta_sq);
      vars__.emplace_back(rho_sq);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 7;
      assign(expected_tools,
        divide(
          elt_multiply(multiply(stan::math::exp(k), p_alpha),
            pow(population, p_beta)), p_gamma),
        "assigning variable expected_tools");
      current_statement__ = 8;
      assign(K,
        add(
          multiply(eta_sq,
            stan::math::exp(multiply(-rho_sq, square(distances)))), jitter),
        "assigning variable K");
      if (emit_transformed_parameters__) {
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          vars__.emplace_back(expected_tools[(sym1__ - 1)]);
        }
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            vars__.emplace_back(
              rvalue(K, "K", index_uni(sym2__), index_uni(sym1__)));
          }
        }
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    int current_statement__ = 0; 
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> k;
      k = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(k, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> k_flat__;
        current_statement__ = 1;
        k_flat__ = context__.vals_r("k");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
          current_statement__ = 1;
          assign(k, k_flat__[(pos__ - 1)],
            "assigning variable k", index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      Eigen::Matrix<double, -1, 1> k_free__;
      k_free__ = Eigen::Matrix<double, -1, 1>(n);
      stan::math::fill(k_free__, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        current_statement__ = 1;
        assign(k_free__, stan::math::lub_free(k[(sym1__ - 1)], -1, 1),
          "assigning variable k_free__", index_uni(sym1__));
      }
      double p_alpha;
      p_alpha = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_alpha = context__.vals_r("p_alpha")[(1 - 1)];
      double p_alpha_free__;
      p_alpha_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 2;
      p_alpha_free__ = stan::math::lb_free(p_alpha, 0);
      double p_beta;
      p_beta = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      p_beta = context__.vals_r("p_beta")[(1 - 1)];
      double p_beta_free__;
      p_beta_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      p_beta_free__ = stan::math::lb_free(p_beta, 0);
      double p_gamma;
      p_gamma = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      p_gamma = context__.vals_r("p_gamma")[(1 - 1)];
      double p_gamma_free__;
      p_gamma_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 4;
      p_gamma_free__ = stan::math::lb_free(p_gamma, 0);
      double eta_sq;
      eta_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      eta_sq = context__.vals_r("eta_sq")[(1 - 1)];
      double eta_sq_free__;
      eta_sq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 5;
      eta_sq_free__ = stan::math::lb_free(eta_sq, 0);
      double rho_sq;
      rho_sq = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      rho_sq = context__.vals_r("rho_sq")[(1 - 1)];
      double rho_sq_free__;
      rho_sq_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 6;
      rho_sq_free__ = stan::math::lb_free(rho_sq, 0);
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        vars__.emplace_back(k_free__[(sym1__ - 1)]);
      }
      vars__.emplace_back(p_alpha_free__);
      vars__.emplace_back(p_beta_free__);
      vars__.emplace_back(p_gamma_free__);
      vars__.emplace_back(eta_sq_free__);
      vars__.emplace_back(rho_sq_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"k", "p_alpha", "p_beta", "p_gamma",
      "eta_sq", "rho_sq", "expected_tools", "K"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(n)
                                                                   },
      std::vector<size_t>{}, std::vector<size_t>{}, std::vector<size_t>{
      }, std::vector<size_t>{}, std::vector<size_t>{},
      std::vector<size_t>{static_cast<size_t>(n)},
      std::vector<size_t>{static_cast<size_t>(n), static_cast<size_t>(n)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "p_alpha");
    param_names__.emplace_back(std::string() + "p_beta");
    param_names__.emplace_back(std::string() + "p_gamma");
    param_names__.emplace_back(std::string() + "eta_sq");
    param_names__.emplace_back(std::string() + "rho_sq");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "expected_tools" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "k" + '.' + std::to_string(sym1__));
      } 
    }
    param_names__.emplace_back(std::string() + "p_alpha");
    param_names__.emplace_back(std::string() + "p_beta");
    param_names__.emplace_back(std::string() + "p_gamma");
    param_names__.emplace_back(std::string() + "eta_sq");
    param_names__.emplace_back(std::string() + "rho_sq");
    if (emit_transformed_parameters__) {
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "expected_tools" + '.' + std::to_string(sym1__));
        } 
      }
      for (int sym1__ = 1; sym1__ <= n; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= n; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "K" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    if (emit_generated_quantities__) {
      
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"p_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"expected_tools\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"k\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"parameters\"},{\"name\":\"p_alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_beta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"p_gamma\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"eta_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"rho_sq\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"expected_tools\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"},{\"name\":\"K\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(n) + ",\"cols\":" + std::to_string(n) + "},\"block\":\"transformed_parameters\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec;
      vars_vec.reserve(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars,
       emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec;
      params_r_vec.reserve(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }

};
}
using stan_model = islands_model_namespace::islands_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return islands_model_namespace::profiles__;
}

#endif


