E = cellarea, control.predictor = list(compute = TRUE))
make_result_table = function(result) {
tab = result$summary.fixed[,c("mean", "0.025quant", "0.975quant")] %>% data.frame %>% rbind(
result$summary.hyperpar[,c("mean", "0.025quant", "0.975quant")] %>% data.frame
)
colnames(tab) = c("Mean", "Lower 95% CI", "Upper 95% CI")
return(tab)
}
res1 %>% make_result_table %>% knitr::kable(digits=3)
prec.prior2 <- list(prec = list(prior = "normal", param = c(0, 0.000001)))
formula2 <- Y ~ 1 + cov +
f(id, model="rw2d", nrow = nrow(grid), ncol = ncol(grid), hyper=prec.prior2) +
f(id2, model="iid", hyper = prec.prior2)
res2 <- inla(formula2, family = "poisson", data = grid@data,
E = cellarea, control.predictor = list(compute = TRUE))
res2 %>% make_result_table %>% knitr::kable(digits = 3)
grid$res_spatial_1 <- res1$summary.random$id[grid$id, "mean"]
grid$res_iid_1 <- res1$summary.random$id2[, "mean"]
tm_shape(grid) +
tm_polygons(col = c("res_spatial_1", "res_iid_1")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 2) +
tm_legend(legend.position = c("left", "bottom"))
cellarea <- resolution*resolution
grid$pred_count_mean_1 <- res1$summary.fitted.values[, "mean"] * cellarea
grid$pred_count_ll_1 <- res1$summary.fitted.values[, "0.025quant"] * cellarea
grid$pred_count_ul_1 <- res1$summary.fitted.values[, "0.975quant"] * cellarea
tm_shape(grid) +
tm_polygons(col = c("pred_count_mean_1", "pred_count_ll_1", "pred_count_ul_1")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 3) +
tm_legend(legend.position = c("left", "bottom"))
grid$res_spatial_2 <- res2$summary.random$id[grid$id, "mean"]
grid$res_iid_2 <- res2$summary.random$id2[, "mean"]
tm_shape(grid) +
tm_polygons(col = c("res_spatial_2", "res_iid_2")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 2) +
tm_legend(legend.position = c("left", "bottom"))
cellarea <- resolution*resolution
grid$pred_count_mean_2 <- res2$summary.fitted.values[, "mean"] * cellarea
grid$pred_count_ll_2 <- res2$summary.fitted.values[, "0.025quant"] * cellarea
grid$pred_count_ul_2 <- res2$summary.fitted.values[, "0.975quant"] * cellarea
tm_shape(grid) +
tm_polygons(col = c("pred_count_mean_2", "pred_count_ll_2", "pred_count_ul_2")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 3) +
tm_legend(legend.position = c("left", "bottom"))
r
nrow(r)
prec.prior1 <- list(prec = list(prior = "normal", param = c(0, 10)))
formula1 <- Y ~ 1 + cov +
f(id, model="rw2d", nrow = nrow(r), ncol = ncol(r), hyper = prec.prior1) +
f(id2, model="iid", hyper = prec.prior1)
res1 <- inla(formula1, family = "poisson", data = grid@data,
E = cellarea, control.predictor = list(compute = TRUE))
make_result_table = function(result) {
tab = result$summary.fixed[,c("mean", "0.025quant", "0.975quant")] %>% data.frame %>% rbind(
result$summary.hyperpar[,c("mean", "0.025quant", "0.975quant")] %>% data.frame
)
colnames(tab) = c("Mean", "Lower 95% CI", "Upper 95% CI")
return(tab)
}
res1 %>% make_result_table %>% knitr::kable(digits=3)
prec.prior2 <- list(prec = list(prior = "normal", param = c(0, 0.000001)))
formula2 <- Y ~ 1 + cov +
f(id, model="rw2d", nrow = nrow(r), ncol = ncol(r), hyper=prec.prior2) +
f(id2, model="iid", hyper = prec.prior2)
res2 <- inla(formula2, family = "poisson", data = grid@data,
E = cellarea, control.predictor = list(compute = TRUE))
res2 %>% make_result_table %>% knitr::kable(digits = 3)
grid$res_spatial_1 <- res1$summary.random$id[grid$id, "mean"]
grid$res_iid_1 <- res1$summary.random$id2[, "mean"]
tm_shape(grid) +
tm_polygons(col = c("res_spatial_1", "res_iid_1")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 2) +
tm_legend(legend.position = c("left", "bottom"))
cellarea <- resolution*resolution
grid$pred_count_mean_1 <- res1$summary.fitted.values[, "mean"] * cellarea
grid$pred_count_ll_1 <- res1$summary.fitted.values[, "0.025quant"] * cellarea
grid$pred_count_ul_1 <- res1$summary.fitted.values[, "0.975quant"] * cellarea
tm_shape(grid) +
tm_polygons(col = c("pred_count_mean_1", "pred_count_ll_1", "pred_count_ul_1")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 3) +
tm_legend(legend.position = c("left", "bottom"))
grid$res_spatial_2 <- res2$summary.random$id[grid$id, "mean"]
grid$res_iid_2 <- res2$summary.random$id2[, "mean"]
tm_shape(grid) +
tm_polygons(col = c("res_spatial_2", "res_iid_2")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 2) +
tm_legend(legend.position = c("left", "bottom"))
cellarea <- resolution*resolution
grid$pred_count_mean_2 <- res2$summary.fitted.values[, "mean"] * cellarea
grid$pred_count_ll_2 <- res2$summary.fitted.values[, "0.025quant"] * cellarea
grid$pred_count_ul_2 <- res2$summary.fitted.values[, "0.975quant"] * cellarea
tm_shape(grid) +
tm_polygons(col = c("pred_count_mean_2", "pred_count_ll_2", "pred_count_ul_2")) +
tm_shape(gridborder) +
tm_borders() +
tm_facets(ncol = 3) +
tm_legend(legend.position = c("left", "bottom"))
library(SpatialEpi)
data(pennLC)
population <- pennLC$data$population
cases <- pennLC$data$cases
n.strata <- 16
E <- expected(population, cases, n.strata)
d <- aggregate(x = pennLC$data$cases, by = list(county = pennLC$data$county), FUN = sum)
# from spatial polygon to simple feature
pennLC.sf <- st_as_sf(pennLC$spatial.polygon)
pennLC.sf$county <- d$county
pennLC.sf$counts <- d$x
pennLC.sf$E <- E[match(pennLC.sf$county, unique(pennLC$data$county))]
pennLC.sf <- merge(pennLC.sf, pennLC$smoking, by.x = "county", by.y = "county")
pennLC.sf <- pennLC.sf%>%
mutate(SIR = counts/E)
neighbor.penn <- poly2nb(pennLC.sf)
Wmat <- matrix(0, nrow=67, ncol=67)
for(m in 1:67){
Wmat[m,neighbor.penn[[m]]] <- 1
Wmat[neighbor.penn[[m]],m] <- 1
}
Dmat <- diag(sapply(1:67, function(i) length(neighbor.penn[[i]])))
## Values of E_i and neighborhood structure
E.penn <- pennLC.sf$E
neighbor.penn <- poly2nb(pennLC.sf)
nb2INLA("npenn.adj", neighbor.penn)
g <- inla.read.graph(filename = "npenn.adj")
pennLC.sf$re_u <- 1:nrow(pennLC.sf)
pennLC.sf$re_v <- 1:nrow(pennLC.sf)
update.packages(ask = FALSE, checkBuilt = TRUE)
install.packages("rstan")
library(maptools);
library(spdep);
library(rgdal)
library(rstan);
options(mc.cores = 6);
load("nyc_subset.data.R");
nyc_shp<-readOGR("nycTracts10", layer="nycTracts10");
geoids <- nyc_shp$GEOID10 %in% nyc_tractIDs;
setwd("~/programs/misc/spatial")
options(mc.cores = 6);
load("nyc_subset.data.R");
nyc_shp<-readOGR("nycTracts10", layer="nycTracts10");
nyc_tractIDs
geoids <- nyc_shp$GEOID10 %in% nyc_tractIDs;
nyc_subset_shp <- nyc_shp[geoids,];
nyc_subset_shp <- nyc_subset_shp[order(nyc_subset_shp$GEOID10),];
nb_nyc_subset = poly2nb(nyc_subset_shp);
coords<-coordinates(clipped_nyc_subset_shp);
y = events_2001
coords<-coordinates(clipped_nyc_subset_shp);
y = events_2001
E = pop_2001;
## set pop > 0 so we can use log(pop) as offset
E[E < 10] = 10;
source("nb_data_funs.R");
nbs=nb2graph(nb_nyc_subset);
N = nbs$N;
node1 = nbs$node1;
node2 = nbs$node2;
N_edges = nbs$N_edges;
scaling_factor = scale_nb_components(nb_nyc_subset)[1];
bym2_stan = stan_model("bym2_offset_only.stan");
load("nyc_subset.data.R");
coords<-coordinates(clipped_nyc_subset_shp);
load("nyc_subset.data.R");
library(rio)
export(import("nyc_subset.data.R"), "nyc_subset_data.csv")
d = import("nyc_subset.data.R")
library(dplyr)
data.frame(events_2001, nyc_tractIDs, pop_2001)
data.frame(nyc_tractIDs, events_2001, pop_2001)
data.frame(nyc_tractIDs, events_2001, pop_2001) %>% export("nyc_subset_data.csv")
nb_nyc_subset
nyc_shp<-readOGR("nycTracts10", layer="nycTracts10");
geoids <- nyc_shp$GEOID10 %in% nyc_tractIDs;
nyc_shp<-readOGR("nycTracts10", layer="nycTracts10");
geoids <- nyc_shp$GEOID10 %in% nyc_tractIDs;
nyc_subset_shp <- nyc_shp[geoids,];
nyc_subset_shp <- nyc_subset_shp[order(nyc_subset_shp$GEOID10),];
nb_nyc_subset = poly2nb(nyc_subset_shp);
nb_nyc_subset
nb_nyc_subset[0]
nb_nyc_subset[1]
nb_nyc_subset[2]
nb_nyc_subset[3]
nb_nyc_subset[1921]
nb_nyc_subset[1922]
source("nb_data_funs.R");
nbs=nb2graph(nb_nyc_subset);
nbs
nbs %>% sizeof
nbs %>% size
nbs %>% dim()
nbs %>% nrow
nbs %>% ncol
nbs
nbs$node1
nbs$node1 %>% size
nbs$node1 %>% dim()
nbs$node1 %>% nrow
nbs$node1 %>% ncol
nbs$node1 %>% length()
nb_nyc_subset
nb_nyc_subset[[1]]
nb_nyc_subset
nb_nyc_subset %>% length
nbs
?nb2graph
??nb2graph
nb_nyc_subset
nb_nyc_subset[[1]][[1]]
nb_nyc_subset[[1]][[2]]
nb_nyc_subset[[1]][[6]]
nb_nyc_subset[[1]][[6]] == 0
nb_nyc_subset[[6]][[1]] == 0
nb_nyc_subset[[6]][[1]]
nb_nyc_subset[[2]][[1]]
nb_nyc_subset[[1]][[1]]
nb_nyc_subset[[7]][[1]]
nbs$N_edges
nb_nyc_subset[[1]][[1]]
unlist(nb_nyc_subset[[1]][[1]])
node1
nbs=nb2graph(nb_nyc_subset);
N = nbs$N;
node1 = nbs$node1;
node2 = nbs$node2;
node1
head(node1)
head(node1, 10)
head(node2, 10)
node1
node1 %>% tail()
data = list(N = 56,
y   = c(    9,   39,   11,    9,   15,    8,   26,    7,    6,   20,
13,    5,    3,    8,   17,    9,    2,    7,    9,    7,
16,   31,   11,    7,   19,   15,    7,   10,   16,   11,
5,    3,    7,    8,   11,    9,   11,    8,    6,    4,
10,    8,    2,    6,   19,    3,    2,    3,   28,    6,
1,    1,    1,    1,    0,    0),
E = c( 1.4, 8.7, 3.0, 2.5, 4.3, 2.4, 8.1, 2.3, 2.0, 6.6,
4.4, 1.8, 1.1, 3.3, 7.8, 4.6, 1.1, 4.2, 5.5, 4.4,
10.5,22.7, 8.8, 5.6,15.5,12.5, 6.0, 9.0,14.4,10.2,
4.8, 2.9, 7.0, 8.5,12.3,10.1,12.7, 9.4, 7.2, 5.3,
18.8,15.8, 4.3,14.6,50.7, 8.2, 5.6, 9.3,88.7,19.6,
3.4, 3.6, 5.7, 7.0, 4.2, 1.8),
x = c(16,16,10,24,10,24,10, 7, 7,16,
7,16,10,24, 7,16,10, 7, 7,10,
7,16,10, 7, 1, 1, 7, 7,10,10,
7,24,10, 7, 7, 0,10, 1,16, 0,
1,16,16, 0, 1, 7, 1, 1, 0, 1,
1, 0, 1, 1,16,10),
adj = c( 5, 9,11,19,
7,10,
6,12,
18,20,28,
1,11,12,13,19,
3, 8,
2,10,13,16,17,
6,
1,11,17,19,23,29,
2, 7,16,22,
1, 5, 9,12,
3, 5,11,
5, 7,17,19,
31,32,35,
25,29,50,
7,10,17,21,22,29,
7, 9,13,16,19,29,
4,20,28,33,55,56,
1, 5, 9,13,17,
4,18,55,
16,29,50,
10,16,
9,29,34,36,37,39,
27,30,31,44,47,48,55,56,
15,26,29,
25,29,42,43,
24,31,32,55,
4,18,33,45,
9,15,16,17,21,23,25,26,34,43,50,
24,38,42,44,45,56,
14,24,27,32,35,46,47,
14,27,31,35,
18,28,45,56,
23,29,39,40,42,43,51,52,54,
14,31,32,37,46,
23,37,39,41,
23,35,36,41,46,
30,42,44,49,51,54,
23,34,36,40,41,
34,39,41,49,52,
36,37,39,40,46,49,53,
26,30,34,38,43,51,
26,29,34,42,
24,30,38,48,49,
28,30,33,56,
31,35,37,41,47,53,
24,31,46,48,49,53,
24,44,47,49,
38,40,41,44,47,48,52,53,54,
15,21,29,
34,38,42,54,
34,40,49,54,
41,46,47,49,
34,38,49,51,52,
18,20,24,27,56,
18,24,30,33,45,55),
weights = c( 1, 1,1,1,
1,1,
1,1,
1,1,1,
1,1,1,1,1,
1, 1,
1,1,1,1,1,
1,
1,1,1,1,1,1,
1, 1,1,1,
1, 1, 1,1,
1, 1,1,
1, 1,1,1,
1,1,1,
1,1,1,
1,1,1,1,1,1,
1, 1,1,1,1,1,
1,1,1,1,1,1,
1, 1, 1,1,1,
1,1,1,
1,1,1,
1,1,
1,1,1,1,1,1,
1,1,1,1,1,1,1,1,
1,1,1,
1,1,1,1,
1,1,1,1,
1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,
1,1,1,1,1,1,1,
1,1,1,1,
1,1,1,1,
1,1,1,1,1,1,1,1,1,
1,1,1,1,1,
1,1,1,1,
1,1,1,1,1,
1,1,1,1,1,1,
1,1,1,1,1,
1,1,1,1,1,
1,1,1,1,1,1,1,
1,1,1,1,1,1,
1,1,1,1,
1,1,1,1,1,
1,1,1,1,
1,1,1,1,1,1,
1,1,1,1,1,1,
1,1,1,1,
1,1,1,1,1,1,1,1,1,
1,1,1,
1,1,1,1,
1,1,1,1,
1,1,1,1,
1,1,1,1,1,
1,1,1,1,1,
1,1,1,1,1,1),
num = c(4, 2, 2, 3, 5, 2, 5, 1,  6,
4, 4, 3, 4, 3, 3, 6, 6, 6 ,5,
3, 3, 2, 6, 8, 3, 4, 4, 4,11,
6, 7, 4, 4, 9, 5, 4, 5, 6, 5,
5, 7, 6, 4, 5, 4, 6, 6, 4, 9,
3, 4, 4, 4, 5, 5, 6)
);
data
library(jsonlite)
toJSON
toJSON(data)
write(toJSON(data), "~/programs/jx/data/scotland.json")
mungeCARdata4stan = function(adjBUGS,numBUGS) {
N = length(numBUGS);
nn = numBUGS;
N_edges = length(adjBUGS) / 2;
node1 = vector(mode="numeric", length=N_edges);
node2 = vector(mode="numeric", length=N_edges);
iAdj = 0;
iEdge = 0;
for (i in 1:N) {
for (j in 1:nn[i]) {
iAdj = iAdj + 1;
if (i < adjBUGS[iAdj]) {
iEdge = iEdge + 1;
node1[iEdge] = i;
node2[iEdge] = adjBUGS[iAdj];
}
}
}
return (list("N"=N,"N_edges"=N_edges,"node1"=node1,"node2"=node2));
}
mungeCARdata4stan(data$adj, data$num)
nbs
mungeCARdata4stan(data$adj, data$num)
library(SpatialEpi)
data("scotland")
scotland
type(scotland)
typeof(scotland)
names(scotland)
scotland$data
scotland$geo
scotland$spatial.polygon
library(rgdal)
writeOGR(scotland$spatial.polygon, dsn = '.', layer = "scotland")
writeOGR(scotland$spatial.polygon, dsn = '.', layer = "scotland", driver = "ESRI Shapefile")
scotland$spatial.polygon %>% typeof
scotland$spatial.polygon
scotland$polygon
SpatialPolygonsDataFrame(scotland$spatial.polygon, scotland$data)
scotland$spatial.polygon %>% nrow
scotland$spatial.polygon %>% length()
scotland$data %>% length()
scotland$data
scotland$data %>% nrow
scotland$spatial.polygon %>% data.frame
as.data.frame(scotland$spatial.polygon)
lapply(scotland$spatial.polygon, function(i) SpatialPolygonsDataFrame(i, data.frame(id=1:length(i)), match.ID = FALSE))
slot()
slot(scotland)
df <- data.frame(id=1)
z <- lapply(scotland$spatial.polygon, function(i) SpatialPolygonsDataFrame(i, df, match.ID = FALSE))
z <- lapply(scotland$polygon, function(i) SpatialPolygonsDataFrame(i, df, match.ID = FALSE))
z <- lapply(scotland, function(i) SpatialPolygonsDataFrame(i, df, match.ID = FALSE))
data(scotlip)
library(sf)
data(scotlip)
st_sf(scotland)
st_polygon(scotland$spatial.polygon)
st_polygon(scotland$polygon)
scotland$spatial.polygon
st_as_sf(scotland$spatial.polygon)
st_sf(scotland$spatial.polygon)
st_as_sf(scotland)
st_as_sf(scotland$spatial.polygon)
geo = st_as_sf(scotland$spatial.polygon)
scotland$geo
scotland$geo %>% merge(scotland$data)
scotland$geo %>% merge(scotland$data) %>% st_sf()
scotland$geo %>% merge(scotland$data
)
scotland$geo %>% merge(scotland$data) %>% merge(geo)
scotland$geo %>% merge(scotland$data) %>% merge(geo) %>% st_sf()
scotland$geo %>% merge(scotland$data) %>% merge(geo) %>% st_sf() %>% writeOGR(dsn=".", layer="scotland", driver="ESRI Shapefile")
scotland$geo %>% merge(scotland$data) %>% merge(geo) %>% st_sf() %>% st_write("scotland.shp")
scotland$geo %>% merge(scotland$data) %>% merge(geo) %>% st_sf() %>% length
scotland$geo %>% merge(scotland$data) %>% merge(geo) %>% st_sf()
scotland$geo %>% merge(scotland$data) %>% merge(geo)
scotland$geo %>% merge(scotland$data)
geo %>% st_geometry()
scotland$geo %>% merge(scotland$data) %>% merge(geo %>% st_geometry())
geo
sp::merge(geo)
scotland$geo %>% merge(scotland$data) %>% sf::merge(geo)
scotland$geo %>% merge(scotland$data) %>% sp::merge(geo)
scotland$geo %>% merge(scotland$data) %>% sp::merge(geo, duplicateGeoms = T)
scotland$geo %>% merge(scotland$data) %>% sp::merge(geo, duplicateGeoms = FALSE)
ne_countries
library("rnaturalearth")
library("rnaturalearthdata")
world <- ne_countries(scale = "medium", returnclass = "sf")
world
geo
typeof(world)
typeof(geo)
geo %>% names
world %>% names
scotland$geo %>% merge(scotland$data) %>% append(geo)
world
geo
scd = scotland$geo %>% merge(scotland$data)
scd
geo %>% left_join(scd)
geo
scotland$polygon
plot(scotland$spatial.polygon)
plot(scotland$polygon)
plot(scotland$polygon$polygon)
plot(scotland$geo)
plot(scotland$geost)
st_as_sf(scd)
st_as_sf(scd, geo)
st_as_sf(geo)
st_write(geo, "scotland.shp")
st_write(geo, "scotland.shp", append=FALSE)
rio::export(scd, "scotland.csv")
scotland
data$y
data$y %>% max()
data$y %>% min()
data$y %>% mean()
data$x %>% mean()
data$x
(data$x * 0.1) %>% mean
data$E %>% mean()
